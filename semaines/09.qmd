---
title: "Semaine 9"
description: "Contenu pour la semaine, incluant les lectures et les modules"
author: "Samuel Guay"
date: "11/08/2022"
categories:
  - cours
  - semaine
---

## **Objectif de cette semaine**:

**Comprendre comment utiliser les principaux packages pour importer des donn√©es
√† partir de divers formats de fichiers et directement √† partir de sites web!**

Si le temps le permet, nous toucherons √©galement aux expressions r√©guli√®res.

## 1. Lectures

### 1.1 [Chapitre 2](https://jhudatascience.org/tidyversecourse/get-data.html#tibbles) de [**Introduction to the Tidyverse**](https://jhudatascience.org/tidyversecourse/intro.html#tidy-data)

Veuillez lire √† partir de la [**section
2.2**](https://jhudatascience.org/tidyversecourse/get-data.html#tibbles). Vous
pouvez sauter la section 2.15 qui touche au package `googledrive`.

### 1.2 Br√®ve introduction aux expressions r√©guli√®res

Les **expressions r√©guli√®res** sont commun√©ment appel√©es ***regex*** ou
***regexp*** pour ***regular expressions*** en anglais. Selon
[Wikip√©dia](https://fr.wikipedia.org/wiki/Expression_r%C3%A9guli%C3%A8re), une
expression r√©guli√®re est *"une cha√Æne de caract√®res, qui d√©crit, selon une
syntaxe pr√©cise, un ensemble de cha√Ænes de caract√®res possibles"*. Si vous
n'avez jamais entendu parl√© des regex, il se peut que cette d√©finition ne vous
aide pas √† comprendre le concept. Dans le texte ci-bas, nous tenterons de
d√©mystifier le tout.

En r√©sum√©, ces expressions permettent de d√©crire des motifs (*patterns*) √†
l'aide de formules "relativement simples" pour trouver, valider, extraire ou
modifier du texte ou des nombres. L'utilisation d'expressions r√©guli√®res sur le
Web est omnipr√©sente, sans que vous ne le sachiez, par exemple lorsqu'on veut
valider nos r√©ponses dans un formulaire et que l'engin nous dit que notre √¢ge
devrait contenir que des chiffres et non des lettres ou simplement pour valider
une adresse de courriel.

::: callout-note
En fait, vous avez probablement d√©j√† utilis√© certains principes lors de vos
recherches sur internet ou dans un catalogue de la biblioth√®que. Par exemple,
si vous recherchez un certain mot, vous pouvez appliquer la m√©thode de la
troncature pour remplacer **toutes** les terminaisons possibles d'une racine
avec `*` ou remplacer **une** lettre ou **un** chiffre au sein d'un mot avec
`?`. Par exemple, la recherche avec le mot `social` vs `socia*` vs `socia?` ne
donnerait pas n√©cessairement les m√™mes r√©sultats puisque `socia*` pourrait
prendre beaucoup de formes diff√©rentes, par exemple, `social`, `socialement,`
`sociaux`, etc.
:::

Les expressions r√©guli√®res sont √©galement tr√®s utilis√©e, sans surprise, par les
programmeurs et de plus en plus en science des donn√©es. Ce n'est pas tout le
monde qui connait les expressions r√©guli√®res, mais d√®s qu'on maitrise la base,
il est difficile de faire autrement. Il s'agit d'une des meilleures qualit√©s
qu'un scientifiques des donn√©es poss√®de, car cela permet de sauver beaucoup de
temps! C'est une connaissance capitale lorsque vient le temps de nettoyer des
donn√©es et d'extraire certaines informations cl√©es.

Voici un classique de [xkcd](https://xkcd.com/208/).

![](/assets/img/xkcd_208.png){fig-align="center"}

√Ä titre d'exemples d'utilisation essentielle sont les fameux v√©rificateurs de
"s√©curit√©" de mots de passe. Consid√©rez ces consignes:

    Pour √™tre consid√©r√© s√©curitaire, votre mot de passe doit contenir:
        Au moins 8 caract√®res
        Au moins 1 chiffre
        Au moins 1 minuscule (a-z)
        Au moins 1 majuscue (A-Z)
        Au moins 1 caract√®re sp√©cial (! @ # $)

Une expression r√©guli√®re qui permet de valider un mot de passe de la sorte est
`^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}$`. Cette expression parait
dr√¥lement compliqu√©e et elle l'est! Il y a beaucoup de *patterns* √† v√©rifier.
Heureusement, les regex que nous utilisons avec nos donn√©es sont "rarement"
aussi compliqu√©es. Pensez par exemple √† extraire des num√©ros de t√©l√©phone, des
codes d'a√©roport, certains mots pr√©cis, etc.

> Le chapitre 11 de Programmer avec R mentionne les outils `grep`, `sed`, et
> `awk` qui sont tr√®s puissants. Cependant, pour le cours, nous nous
> concentrerons sur les concepts de base et expressions utiles dans R.

#### Composition d'une expression r√©guli√®re

Lorsque nous voulons construire une expression r√©guli√®re, notre but de cr√©er un
"mod√®le" qui permettra de trouver les portions de chaines de caract√®res qui lui
correspond. C'est un outil tr√®s puissant, mais qui peut nous causer quelques
maux de t√™te si on essaie de cr√©er une expression sans trop savoir ce que
repr√©sente les diff√©rents caract√®res ou ensembles de caract√®res.

Comme dans la construction d'une fonction, nous pouvons cr√©er l'expression de
fa√ßon graduelle √† l'aide de sous-expressions. Par contre, avant de cr√©er, il
faut connaitre ou, du moins, avoir une id√©e de l'existence des diff√©rentes
possibilit√©s. √Ä se rappeler qu'une expression r√©guli√®re n'est qu'un langage de
description d'une chaine de texte.

##### Syntaxe de base

Il y a plusieurs r√®gles ou principes de base lorsque nous composons des
expressions r√©guli√®res. Voici les principales r√®gles:

-   Un caract√®re litt√©ral correspond √† la premi√®re occurrence de ce caract√®re
    dans la chaine de texte cibl√©e.

-   Une expression r√©guli√®re peut √™tre form√©e par une ou plusieurs expressions
    r√©guli√®res combin√©es. Elle correspond alors √† toute chaine de texte qui
    correspond aux sous-expressions. Autrement dit, les composantes d'une
    expression r√©guli√®re sont par d√©faut reli√©es par une clause\
    ¬´ et ¬ª.

Si nous voulons trouver un mot textuellement dans un texte, le plus simple est
d'√©crire les caract√®res litt√©raux en guise d'expression.\
Par exemple, l'expression `soir` fonctionnerait autant dans `soir`, bon`soir`
et `soir`√©e.

Voici les principaux op√©rateurs et leur fonction

`.`

:   Le `.` (point) peut prendre n'importe quel caract√®re sauf "\n". Il s'agit
    du wildcard le plus utilis√©.

`?`

:   le caract√®re pr√©c√©dent apparait 0 ou 1 fois seulement.

`*`

:   le caract√®re pr√©c√©dent apparait 0 ou plusieurs fois.

`+`

:   le caract√®re pr√©c√©dent apparait 1 ou plusieurs fois.

`{n}`

:   le caract√®re pr√©c√©dent apparait exactement n fois.

`{n,m}`

:   le caract√®re pr√©c√©dent apparait au moins n fois et pas plus de m fois.

`[agd]`

:   le caract√®re est un de ceux indiqu√©s dans les \[ \].

`[^agd]`

:   le caract√®re n'est pas de ceux indiqu√©s dans les \[ \].

`[c-e]`

:   le - √† l'int√©rieur des \[ \] indique une plage de caract√®res ou de
    chiffres. Dans l'exemple, le caract√®re doit √™tre c, d ou e.

`()`

:   Les ( ) regroupent plusieurs caract√®res en une entit√©.

`|` (pipe)

:   Op√©rateur logique OU, comme dans R!

`^`

:   D√©bute la chaine de caract√®res.

`$`

:   Termine la chaine de caract√®res.

##### Sous-expressions les plus communes:

`.*`

:   correspond √† une chaine de caract√®res quelconques de longueur arbitraire, y
    compris z√©ro.

`.+`

:   correspond √† une chaine de caract√®res quelconques longue d'au moins un
    caract√®re ; √©quivalent √† `..*`

`.?`

:   correspond √† aucun ou un seul caract√®re quelconque.

`[a-z]` et `[A-Z]`

:   correspondent √† l'alphabet en minuscule et majuscule respectivement, sans
    accents.

`[0-9]`

:   correspond aux entiers de 0 √† 9.

√âvidemment, il y en a beaucoup plus. Heureusement, il y a une *cheatsheet* qui
a √©t√© traduite en fran√ßais pour nous aider √† se rappeler des op√©rations les
plus courantes.

Dans ce document, vous verrez qu'on regroupe les diff√©rents op√©rateurs selon
leur fonction, soit *m√©tacaract√®res*, *Classes* et *Groupes de caract√®res,*
*Ancres*, *Quantifieurs*, etc.

üìì [Aide-m√©moire pour les regex en fran√ßais](/assets/fichiers/regex_fr.pdf)
cr√©√© par [Ian Kopacka](mailto:ian.kopacka@ages.at) et traduit par [Ahmadou
Dicko](https://www.ahmadoudicko.com/) (CC BY)

## 2. Module 5

Le module 5 est relativement simple √† compl√©ter, veuillez tout simplement
remplir le questionnaire qui se trouve au
[**https://fas1002-m02.formr.org/**](https://fas1002-m02.formr.org/). Il est
important de remplir le questionnaire avec le m√™me [code
d'identification](https://edstem.org/us/courses/6933/discussion/1736805) qu'au
d√©but de la session, car nous nous amuserons avec les donn√©es au prochain
cours!

-------------------------------------------------------------------------------

![](/assets/img/workflow-cute.png){fig-alt="Updated from Grolemund & Wickham's classis R4DS schematic, envisioned by Dr. Julia Lowndes for her 2019 useR! keynote talk and illustrated by Allison Horst."}

Figure par [\@allison_horst](https://twitter.com/allison_horst)
([CC-BY](https://creativecommons.org/licenses/by/4.0/))

\-\--

## Cours

Vous pouvez t√©l√©charger les fichiers suivants:

[Document principal](/assets/fichiers/_import-export.qmd)

| CSV                                       | TSV                                       |
|----------------------------------------|----------------------------------------|
| [data_1.csv](/assets/fichiers/data_1.csv) | [data_1.tsv](/assets/fichiers/data_1.tsv) |
| [data_2.csv](/assets/fichiers/data_2.csv) | [data_2.tsv](/assets/fichiers/data_2.tsv) |
| [data_3.csv](/assets/fichiers/data_3.csv) | [data_3.tsv](/assets/fichiers/data_3.tsv) |
| [data_4.csv](/assets/fichiers/data_4.csv) | [data_4.tsv](/assets/fichiers/data_4.tsv) |

Bonne semaine! ‚úåÔ∏è
